generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  name                String
  role                Role           @default(EMPLOYEE)
  password            String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  managerId           String?
  failedLoginAttempts Int            @default(0)
  lastLoginAt         DateTime?
  lastLoginAttempt    DateTime?
  department          String?
  isActive            Boolean        @default(true)
  position            String?
  feedbackGiven       Feedback[]     @relation("FeedbackGiven")
  feedbackReceived    Feedback[]     @relation("FeedbackReceived")
  createdGoals        Goal[]         @relation("CreatedGoals")
  deletedGoals        Goal[]         @relation("DeletedGoals")
  goals               Goal[]         @relation("EmployeeGoals")
  managerGoals        Goal[]         @relation("ManagerGoals")
  updatedGoals        Goal[]         @relation("UpdatedGoals")
  notifications       Notification[]
  managerRatings      Rating[]       @relation("ManagerRatings")
  selfRatings         Rating[]       @relation("SelfRatings")
  manager             User?          @relation("UserToUser", fields: [managerId], references: [id])
  employees           User[]         @relation("UserToUser")

  @@index([managerId])
  @@index([lastLoginAt])
  @@index([lastLoginAttempt])
}

model Goal {
  id              String         @id @default(cuid())
  title           String
  description     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  dueDate         DateTime
  managerId       String?
  employeeId      String
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectedBy      String?
  managerComments String?
  category        GoalCategory   @default(PROFESSIONAL)
  createdById     String?
  deletedAt       DateTime?
  deletedById     String?
  updatedById     String?
  status          GoalStatus     @default(PENDING)
  progress        Float          @default(0)
  progressNotes   String?
  lastProgressUpdate DateTime?
  createdBy       User?          @relation("CreatedGoals", fields: [createdById], references: [id])
  deletedBy       User?          @relation("DeletedGoals", fields: [deletedById], references: [id])
  employee        User           @relation("EmployeeGoals", fields: [employeeId], references: [id])
  manager         User?          @relation("ManagerGoals", fields: [managerId], references: [id])
  updatedBy       User?          @relation("UpdatedGoals", fields: [updatedById], references: [id])
  notifications   Notification[]
  ratings         Rating[]

  @@index([managerId])
  @@index([employeeId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Rating {
  id               String   @id @default(cuid())
  goalId           String
  selfRatedById    String
  managerRatedById String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  comments         String?
  score            Int
  goal             Goal     @relation(fields: [goalId], references: [id])
  managerRatedBy   User?    @relation("ManagerRatings", fields: [managerRatedById], references: [id])
  selfRatedBy      User     @relation("SelfRatings", fields: [selfRatedById], references: [id])

  @@index([goalId])
  @@index([selfRatedById])
  @@index([managerRatedById])
}

model Feedback {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromId     String
  status     String
  toId       String
  givenBy    User     @relation("FeedbackGiven", fields: [fromId], references: [id])
  receivedBy User     @relation("FeedbackReceived", fields: [toId], references: [id])

  @@index([fromId])
  @@index([toId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  goalId    String?
  goal      Goal?            @relation(fields: [goalId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([goalId])
}

model SystemSettings {
  id                   Int      @id @default(1)
  systemName           String   @default("Bistec AspireHub")
  theme                String   @default("dark")
  notificationSettings Json
  reviewSettings       Json
  securitySettings     Json
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

// This enum is used to track the status of goals
enum GoalStatus {
  PENDING
  APPROVED
  REJECTED
  MODIFIED
  COMPLETED
  DRAFT
  DELETED
}

enum NotificationType {
  GOAL_CREATED
  GOAL_UPDATED
  GOAL_APPROVED
  GOAL_REJECTED
  GOAL_MODIFIED
  GOAL_COMPLETED
  FEEDBACK_RECEIVED
  RATING_RECEIVED
}

enum GoalCategory {
  PROFESSIONAL
  TECHNICAL
  LEADERSHIP
  PERSONAL
  TRAINING
  KPI
}
