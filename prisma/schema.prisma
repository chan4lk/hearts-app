generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  name                String
  role                Role           @default(EMPLOYEE)
  password            String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  managerId           String?
  failedLoginAttempts Int            @default(0)
  lastLoginAt         DateTime?
  lastLoginAttempt    DateTime?
  department          String?
  isActive            Boolean        @default(true)
  position            String?

  createdGoals        Goal[]         @relation("CreatedGoals")
  deletedGoals        Goal[]         @relation("DeletedGoals")
  goals               Goal[]         @relation("EmployeeGoals")
  managerGoals        Goal[]         @relation("ManagerGoals")
  updatedGoals        Goal[]         @relation("UpdatedGoals")
  notifications       Notification[]
  managerRatings      Rating[]       @relation("ManagerRatings")
  selfRatings         Rating[]       @relation("SelfRatings")
  manager             User?          @relation("UserToUser", fields: [managerId], references: [id])
  employees           User[]         @relation("UserToUser")
  feedbackGiven360    Feedback360[]  @relation("FeedbackGiven360")
  feedbackReceived360 Feedback360[]  @relation("FeedbackReceived360")
  createdFeedbackCycles FeedbackCycle[] @relation("CreatedFeedbackCycles")

  @@index([managerId])
  @@index([lastLoginAt])
  @@index([lastLoginAttempt])
}

model Goal {
  id              String         @id @default(cuid())
  title           String
  description     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  dueDate         DateTime
  managerId       String?
  employeeId      String
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectedBy      String?
  managerComments String?
  category        GoalCategory   @default(PROFESSIONAL)
  department      String         @default("ENGINEERING")
  priority        String         @default("MEDIUM")
  createdById     String?
  deletedAt       DateTime?
  deletedById     String?
  updatedById     String?
  status          GoalStatus     @default(PENDING)
  progress        Float          @default(0)
  progressNotes   String?
  lastProgressUpdate DateTime?
  createdBy       User?          @relation("CreatedGoals", fields: [createdById], references: [id])
  deletedBy       User?          @relation("DeletedGoals", fields: [deletedById], references: [id])
  employee        User           @relation("EmployeeGoals", fields: [employeeId], references: [id])
  manager         User?          @relation("ManagerGoals", fields: [managerId], references: [id])
  updatedBy       User?          @relation("UpdatedGoals", fields: [updatedById], references: [id])
  notifications   Notification[]
  ratings         Rating[]

  @@index([managerId])
  @@index([employeeId])
  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Rating {
  id               String   @id @default(cuid())
  goalId           String
  selfRatedById    String
  managerRatedById String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  comments         String?
  score            Int
  goal             Goal     @relation(fields: [goalId], references: [id])
  managerRatedBy   User?    @relation("ManagerRatings", fields: [managerRatedById], references: [id])
  selfRatedBy      User     @relation("SelfRatings", fields: [selfRatedById], references: [id])

  @@index([goalId])
  @@index([selfRatedById])
  @@index([managerRatedById])
}



model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  goalId    String?
  goal      Goal?            @relation(fields: [goalId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([goalId])
}

model SystemSettings {
  id                   Int      @id @default(1)
  systemName           String   @default("Bistec AspireHub")
  theme                String   @default("dark")
  notificationSettings Json
  reviewSettings       Json
  securitySettings     Json
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

// This enum is used to track the status of goals
enum GoalStatus {
  PENDING
  APPROVED
  REJECTED
  MODIFIED
  COMPLETED
  DRAFT
  DELETED
}

enum NotificationType {
  GOAL_CREATED
  GOAL_UPDATED
  GOAL_APPROVED
  GOAL_REJECTED
  GOAL_MODIFIED
  GOAL_COMPLETED
  RATING_RECEIVED
  FEEDBACK_360_RECEIVED
  FEEDBACK_360_COMPLETED
}

enum GoalCategory {
  PROFESSIONAL
  TECHNICAL
  LEADERSHIP
  PERSONAL
  TRAINING
  KPI
}

// 360-Degree Feedback System
enum FeedbackCycleType {
  QUARTERLY
  ANNUAL
  PROJECT_BASED
  AD_HOC
}

enum FeedbackCycleStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ReviewerType {
  SELF
  MANAGER
  PEER
  SUBORDINATE
  CLIENT
  STAKEHOLDER
}

enum CompetencyCategory {
  TECHNICAL
  LEADERSHIP
  SOFT_SKILLS
  BUSINESS
  INNOVATION
  COLLABORATION
}

model FeedbackCycle {
  id          String              @id @default(cuid())
  name        String              // "Q1 2024", "Annual Review 2024"
  description String?
  type        FeedbackCycleType   @default(ANNUAL)
  status      FeedbackCycleStatus @default(DRAFT)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdBy   String
  isActive    Boolean             @default(true)
  
  // Relations
  feedbacks   Feedback360[]
  competencies Competency[]
  createdByUser User @relation("CreatedFeedbackCycles", fields: [createdBy], references: [id])
  
  @@index([status])
  @@index([type])
  @@index([startDate])
  @@index([endDate])
}

model Competency {
  id          String             @id @default(cuid())
  name        String             // "Leadership", "Technical Skills", "Communication"
  description String?
  category    CompetencyCategory @default(SOFT_SKILLS)
  weight      Float              @default(1.0) // Importance weight
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relations
  levels      CompetencyLevel[]
  assessments CompetencyAssessment[]
  feedbackCycles FeedbackCycle[]
  
  @@index([category])
  @@index([isActive])
}

model CompetencyLevel {
  id          String   @id @default(cuid())
  competencyId String
  level       Int      // 1-5 scale
  name        String   // "Beginner", "Intermediate", "Advanced", "Expert", "Master"
  description String
  examples    String[] // Array of example behaviors
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  competency  Competency @relation(fields: [competencyId], references: [id])
  assessments CompetencyAssessment[]
  
  @@index([competencyId])
  @@index([level])
}

model Feedback360 {
  id              String       @id @default(cuid())
  cycleId         String
  employeeId      String       // Person being reviewed
  reviewerId      String       // Person giving feedback
  reviewerType    ReviewerType
  isAnonymous     Boolean      @default(false)
  isCompleted     Boolean      @default(false)
  submittedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  cycle           FeedbackCycle @relation(fields: [cycleId], references: [id])
  employee        User          @relation("FeedbackReceived360", fields: [employeeId], references: [id])
  reviewer        User          @relation("FeedbackGiven360", fields: [reviewerId], references: [id])
  competencyAssessments CompetencyAssessment[]
  comments        FeedbackComment[]
  
  @@unique([cycleId, employeeId, reviewerId])
  @@index([cycleId])
  @@index([employeeId])
  @@index([reviewerId])
  @@index([reviewerType])
  @@index([isCompleted])
}

model CompetencyAssessment {
  id              String   @id @default(cuid())
  feedbackId      String
  competencyId    String
  levelId         String
  rating          Int      // 1-5 scale
  comments        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  feedback        Feedback360 @relation(fields: [feedbackId], references: [id])
  competency      Competency @relation(fields: [competencyId], references: [id])
  level           CompetencyLevel @relation(fields: [levelId], references: [id])
  
  @@unique([feedbackId, competencyId])
  @@index([feedbackId])
  @@index([competencyId])
  @@index([rating])
}

model FeedbackComment {
  id          String   @id @default(cuid())
  feedbackId  String
  section     String   // "strengths", "improvements", "overall"
  content     String
  isPrivate   Boolean  @default(false) // Only visible to employee and manager
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  feedback    Feedback360 @relation(fields: [feedbackId], references: [id])
  
  @@index([feedbackId])
  @@index([section])
}
